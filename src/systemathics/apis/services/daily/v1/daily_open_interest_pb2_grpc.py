# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from systemathics.apis.services.daily.v1 import daily_open_interest_pb2 as systemathics_dot_apis_dot_services_dot_daily_dot_v1_dot_daily__open__interest__pb2


class DailyOpenInterestsServiceStub(object):
    """Called to request daily OpenInterest data. 
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DailyOpenInterests = channel.unary_unary(
                '/systemathics.apis.services.daily.v1.DailyOpenInterestsService/DailyOpenInterests',
                request_serializer=systemathics_dot_apis_dot_services_dot_daily_dot_v1_dot_daily__open__interest__pb2.DailyOpenInterestsRequest.SerializeToString,
                response_deserializer=systemathics_dot_apis_dot_services_dot_daily_dot_v1_dot_daily__open__interest__pb2.DailyOpenInterestsResponse.FromString,
                )


class DailyOpenInterestsServiceServicer(object):
    """Called to request daily OpenInterest data. 
    """

    def DailyOpenInterests(self, request, context):
        """Gets daily historical open interest
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DailyOpenInterestsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DailyOpenInterests': grpc.unary_unary_rpc_method_handler(
                    servicer.DailyOpenInterests,
                    request_deserializer=systemathics_dot_apis_dot_services_dot_daily_dot_v1_dot_daily__open__interest__pb2.DailyOpenInterestsRequest.FromString,
                    response_serializer=systemathics_dot_apis_dot_services_dot_daily_dot_v1_dot_daily__open__interest__pb2.DailyOpenInterestsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'systemathics.apis.services.daily.v1.DailyOpenInterestsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DailyOpenInterestsService(object):
    """Called to request daily OpenInterest data. 
    """

    @staticmethod
    def DailyOpenInterests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/systemathics.apis.services.daily.v1.DailyOpenInterestsService/DailyOpenInterests',
            systemathics_dot_apis_dot_services_dot_daily_dot_v1_dot_daily__open__interest__pb2.DailyOpenInterestsRequest.SerializeToString,
            systemathics_dot_apis_dot_services_dot_daily_dot_v1_dot_daily__open__interest__pb2.DailyOpenInterestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
