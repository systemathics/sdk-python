syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "systemathics/apis/type/v1/constraints.proto";
import "systemathics/apis/type/v1/mappings.proto";
import "systemathics/apis/type/v1/stream.proto";
import "systemathics/apis/type/v1/market_book_updates.proto";
import "systemathics/apis/type/v1/market_fields_updates.proto";
import "systemathics/apis/type/v1/identifier.proto";

package systemathics.apis.services.v1;

// The market data service definition
// It allows to replay tick by tick data
service MarketDataService 
{
    // Get Market Data 
    rpc MarketData(MarketDataRequest) returns (stream MarketDataResponse);
}

// Represents a market data request with:
//  - One or several memos
//  - Some associated constraints (date, time, days, ...) 
message MarketDataRequest
{
    // Represents an array of identifier
    repeated systemathics.apis.type.v1.Identifier identifiers = 1;
    // Level representing either Trades only(Level 1) or Trades + Book (Level 1 and Level 2)
    systemathics.apis.type.v1.Stream level = 2;
    // Represents some additionnal constraints (date, time, days, ...) 
    systemathics.apis.type.v1.Constraints constraints = 3;
}

// Represents a market data response, it contains:
// - an event source representing a memo in a shorter form
// - a time stamp UTC
// - a payload that can be a mapping (event source <=> memo), some fields update or some books update
message MarketDataResponse 
{
    // event source (short code for memo)
    uint32 event_source = 1;
    // Timestamp from market
    google.protobuf.Timestamp time_stamp = 2;
    // a payload
    oneof payload 
    {
        // Some fields update
        systemathics.apis.type.v1.MarketFieldsUpdates fields_updates = 3;
        // Some books update
        systemathics.apis.type.v1.MarketBookUpdates book_updates = 4;
        // Event source <=> Memo mapping. It's sent once when streaming begins.
        systemathics.apis.type.v1.Mappings mappings = 5;
    }
}
