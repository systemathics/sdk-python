// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Reference data encompasses a wide range of specification data about:
// <br>- financial instrument such as asset class, symbol, maturity, etc.
// <br>- counterparties such as issuer information.
// <br>- pricing such as open, high low and close prices.
// <br>The challenge with reference data is that it tends to be sourced from multiple sources: internal, counterparties and providers.
// <br>Reference data dedicated service is a result of various data sources and fields sourcing, validation, cross-checking and normalization.
syntax = "proto3";


import "google/protobuf/wrappers.proto";
import "google/type/date.proto";
import "systemathics/apis/type/v1/memo.proto";
import "systemathics/apis/type/v1/identifier.proto";

package systemathics.apis.services.v1;

// Called to request reference data.
service StaticDataService
{
  // // Gets reference data
  rpc StaticData(StaticDataRequest) returns (StaticDataResponse);
}

// The required input to request the StaticDataService
message StaticDataRequest
{
    // Asset type
    AssetType asset_type = 1;

    // Asset name
    google.protobuf.StringValue name = 2;

    // Asset exchange (mic code)
    google.protobuf.StringValue exchange = 3;

    // Asset ticker (code as provided by the exchange)
    google.protobuf.StringValue ticker = 4;
    
    // Future contract code
    google.protobuf.StringValue future_contract = 5;

    // Future category
    google.protobuf.StringValue future_category = 6;

    // Equity sector
    google.protobuf.StringValue equity_sector = 7;

    // Index if the asset belongs to an index components
    google.protobuf.StringValue index = 8;
    
    // Mapping codes: isin, cusip, sedol, ric, figi, etc.
    google.protobuf.StringValue code = 9;
        
    // Start index of retrived results
    google.protobuf.Int32Value start = 10;

    // Maximum number of retrieved results
    google.protobuf.Int32Value count = 11;
}

// // Represents a reference data response grouped by asset type.
message StaticDataResponse
{
	// The reference data for futures: an array of FutureEntry objects
	repeated FutureEntry futures  = 1;

	// The reference data for equities: an array of EquityEntry objects
	repeated EquityEntry equities  = 2;
}

// Contains the reference data for equities.
message EquityEntry
{
    // Identifiers 
	// --> The asset identifier
	systemathics.apis.type.v1.Identifier identifier = 1;
	
    // General informations
    // --> The asset class
    string type = 2;
	// --> The asset country code (ISO 3166)
	string country = 3;
	// --> The asset full name 
	string name = 4;
	// --> The asset currency code (ISO 4217)
	string currency = 5;
	// --> The asset primary exchange code (mic)
	string primary = 6;
	// --> The asset tick size rule table
	string tick_size_rule = 7;
	// The asset mapping codes
	map<string, string> mapping = 8;
	// The asset index
	string index = 9;

	// The trading hours
	// --> The open time (continuous trading)
	string open = 10;
	// --> The close time (continuous trading)
	string close = 11;
	// --> The time zone
	string time_zone = 12;

    // The specifications
    // --> The lot size (minimum quantity to trade)
    int64 lot_size = 13;
	// --> The point value
	double point_value = 14;

    // Specific values for the equity
    // --> The isin code : International Securities Identifying Number
    string isin = 15;
	// --> The cusip code : Committee on Uniform Security Identification Procedures
	string cusip = 16;
	// --> The sedol code : Stock Exchange Daily Official List
	string sedol = 17;
    // --> The sectors definitions
	map<string, string> sectors = 18;
    // --> The the market capitalization
    google.protobuf.DoubleValue capitalization = 19;
}

// Contains the reference data for futures.
message FutureEntry
{
	// Identifiers 
	// --> The asset identifier
	systemathics.apis.type.v1.Identifier identifier = 1;
	
	// General informations
	// --> The asset class
	string type = 2;
	// --> The asset country code (ISO 3166)
	string country = 3;
	// --> The asset full name 
	string name = 4;
	// --> The asset currency code (ISO 4217)
	string currency = 5;
	// --> The asset primary exchange code (mic)
	string primary = 6;
	// --> The asset tick size rule table
	string tick_size_rule = 7;
	// The asset mapping codes
	map<string, string> mapping = 8;
	// The asset index
	string index = 9;

	// The trading hours
	// --> The open time (continuous trading)
	string open = 10;
	// --> The close time (continuous trading)
	string close = 11;
	// --> The time zone
	string time_zone = 12;

	// The specifications
	// --> The lot size (minimum quantity to trade)
	int64 lot_size = 13;
	// --> The point value
	double point_value = 14;

	// Specific values for the future
	// --> The underlying asset code
	string underlying = 15;
	// --> The future contract code
	string contract = 16;
	// --> The future category
	map<string, string> category = 17;
	// --> The future chain
	string chain = 18;
	// --> The maturity date
	google.type.Date maturity = 19;
	// --> The future month code
	string month = 20;
	// --> The future year
	int32 year = 21;
}

// // Contains the asset type for the reference data request.
enum AssetType
{
	// Not specified ?
	ASSET_TYPE_UNSPECIFIED = 0;
	
	// Search on all asset types
    ASSET_TYPE_ALL = 1;
	
    // Search only on equities
    ASSET_TYPE_EQUITY = 2;

	// Search only on futures
	ASSET_TYPE_FUTURE = 3;
}
