syntax = "proto3";


import "google/protobuf/wrappers.proto";
import "google/type/date.proto";
import "systemathics/apis/type/v1/memo.proto";

package systemathics.apis.services.v1;

// The topology service definition
service StaticDataService
{
  // Get Topologies
  rpc StaticData(StaticDataRequest) returns (StaticDataResponse);
}

enum AssetType
{
    ASSET_TYPE_UNSPECIFIED = 0;
    ASSET_TYPE_ALL = 1;
    ASSET_TYPE_EQUITY = 2;
    ASSET_TYPE_FUTURE = 3;   
}

enum FutureCategory
{
	FUTURE_CATEGORY_UNSPECIFIED = 0;
	FUTURE_CATEGORY_INDEX = 1;
	FUTURE_CATEGORY_EQUITY = 2;
	FUTURE_CATEGORY_COMMODITY = 3;   
}

// Represents a static data request
message StaticDataRequest
{
    AssetType asset_type = 1;

    google.protobuf.StringValue name = 2;

    google.protobuf.StringValue market_identifier_code = 3;

    google.protobuf.StringValue ticker = 4;
    
    google.protobuf.StringValue future_contract = 5;
    
    google.protobuf.StringValue code = 6;
        
    google.protobuf.Int32Value start = 7;

    google.protobuf.Int32Value count = 8;
}

enum EquityDividendType
{
	EQUITY_DIVIDEND_TYPE_UNSPECIFIED = 0;
    EQUITY_DIVIDEND_TYPE_CASH = 1;
    EQUITY_DIVIDEND_TYPE_STOCK = 2;
}

message EquityDividend{
	google.type.Date effective_date = 1;
	EquityDividendType dividend_type = 2;
    double amount_or_proportion = 3;
}

message EquitySplit{
	google.type.Date effective_date = 1;
	uint32 new_shares = 2;
	uint32 old_shares = 3;
}

// Represents a future
message FutureEntry
{
    // Memo code for this future. Used by other apis
    systemathics.apis.type.v1.Memo memo = 1;
    // Future identifier
    Identifier identifier = 2;
    // Future name 
    string name = 3;
    // Mapping identifiers
    map<string, string> mapping = 4;
    // Contract (symbol root)
    string contract = 5;
    // Underlying of the future
    string underlying = 6;
    // Category of the future
    FutureCategory category = 7;
    // Country code
    string country = 8;
    // Currency
    string currency = 9;
    // Maturity Date
    google.type.Date maturity = 10;
    // Month letter
    string month = 11;
    // Year
    int32 year = 12;
    // Lot size
    int32 lot_size = 13;
    // Point Value
    int32 point_value = 14;
    // Tick size rule in array format
    string tick_size_rule = 15;   
}

// Represents an equity
message EquityEntry
{
	// Memo code for this future. Used by other apis
	systemathics.apis.type.v1.Memo memo = 1;
	// Future identifier
	Identifier identifier = 2;
	// Future name 
	string name = 3;
	// other mapping identifiers
	map<string, string> mapping = 5;
	// Country code
	string country = 6;
	// Currency
	string currency = 7;
	// Point Value
	int32 point_value = 8;
	// Tick size rule in array format
	string tick_size_rule = 9;   
    // Coprorate actions : Dividends
	repeated EquityDividend  dividends = 10;
	// Coprorate actions : Splits
	repeated EquitySplit  splits = 11;
}

message Identifier 
{
    string primary_market_identifier_code = 1;

    string market_identifier_code = 2;

    string ticker = 3;
}

// Represents a response to a topology request
message StaticDataResponse
{
    repeated FutureEntry futures  = 1;
    repeated EquityEntry equities  = 2;
}
 
