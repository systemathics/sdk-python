// Normalized tick by tick data extraction for a given watchlist and a specific look-back period. This can be useful to:
// <br>- Get specific historical dataset such as trades, top of book data...
// <br>- Compute analytics on the top of preselected tick by tick data dataset
// <br>- Feed best execution reports for a given watchlist over the time
syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "systemathics/apis/type/v1/constraints.proto";
import "systemathics/apis/type/v1/mappings.proto";
import "systemathics/apis/type/v1/stream.proto";
import "systemathics/apis/type/v1/market_book_updates.proto";
import "systemathics/apis/type/v1/market_fields_updates.proto";
import "systemathics/apis/type/v1/identifier.proto";

package systemathics.apis.services.v1;

// Called to request tick by tick normalized historical data.
service TickDataService 
{
    // Get tick by tick normalized historical Data 
    rpc TickData(TickDataRequest) returns (stream TickDataResponse);
}

// The required inputs to request the TickDataService.
message TickDataRequest
{
    // Represents an array of instrument identifier: a ticker and exchange
    repeated systemathics.apis.type.v1.Identifier identifiers = 1;
    // Level representing either Trades only(Level 1) or Trades + Book (Level 1 and Level 2)
    systemathics.apis.type.v1.Stream level = 2;
    // Represents some additionnal constraints (date, time, days, ...) 
    systemathics.apis.type.v1.Constraints constraints = 3;
}

// Contains the tick by tick normalized historical data: event source, timestamp and payload.
message TickDataResponse 
{
    // Event source: short code for instrument identifier
    uint32 event_source = 1;
    // Timestamp from market
    google.protobuf.Timestamp time_stamp = 2;
    // Payload: that can be a mapping (event source and instrument identifier), some fields update or some books update
    oneof payload 
    {
        // Some fields update
        systemathics.apis.type.v1.MarketFieldsUpdates fields_updates = 3;
        // Some books update
        systemathics.apis.type.v1.MarketBookUpdates book_updates = 4;
        // Event source and instrument identifier mapping. It's sent once when streaming begins.
        systemathics.apis.type.v1.Mappings mappings = 5;
    }
}
