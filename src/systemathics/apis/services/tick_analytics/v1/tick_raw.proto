// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Raw tick by tick data extraction in provider format for a given watchlist and a specific look-back period. This can be useful to:
// <br>- Audit provider raw data reception and completion
// <br>- Compare provider data formats
// <br>- Compare raw provider format data to normalized data
syntax = "proto3";

import "google/protobuf/timestamp.proto";

import "systemathics/apis/type/shared/v1/constraints.proto";
import "systemathics/apis/type/shared/v1/field.proto";
import "systemathics/apis/type/shared/v1/stream.proto";
import "systemathics/apis/type/shared/v1/identifier.proto";

package systemathics.apis.services.v1;

// Called to request tick by tick raw data.
service TickRawService 
{
	// Gets tick by tick historical data
    rpc TickRaw(TickRawRequest) returns (stream TickRawResponse);
}

// The required inputs to request the TickRawService.
message TickRawRequest 
{
    // [Mandatory] The instrument identifier: a ticker and exchange
	systemathics.apis.type.v1.Identifier identifier = 1;

	// [Optional] The time constraints used to define the look-back period
	// If empty, then all the available data is used
	systemathics.apis.type.v1.Constraints constraints = 2;

	// [Mandatory] The stream level (Level 1 or Level 1 and 2)
    systemathics.apis.type.v1.Stream level = 3;
}

// Contains the ticks in raw provider format.
message TickRawItem
{
	// The timestamp
	google.protobuf.Timestamp time_stamp = 1;

	// The frame type
	uint32 type = 2;

	// The event source
	uint32 source = 3;
    
	// Payload
	bytes payload = 4;
}

// Represents a raw data response: several at once.
message TickRawResponse
{
	// The raw data: an array of TickRawItem objects
	repeated TickRawItem raw_items = 1;
}

// Represents the RAW response: one by one, this is not performant due to Microsoft gRPC API handling of this use case.
message TickRawResponse2
{
	// The timestamp
	google.protobuf.Timestamp time_stamp = 1;

	// The frame type
	uint32 type = 2;

	// The event source
	uint32 source = 3;
    
	// Payload
	bytes payload = 4;
}
