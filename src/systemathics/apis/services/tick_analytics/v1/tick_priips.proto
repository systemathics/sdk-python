// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// <i>PRIIPs</i> regulation EU-wide rules governing information disclosure for all Packaged Retail and Insurance-based Investment Products (PRIIPs).
// <br>Essentially, this covers any investment product used by a retail consumer that isn't a UCITS fund.
// <br>The method used to determine implicit transaction costs is the full PRIIPs method, also known as the arrival price methodology.
syntax = "proto3";

import "google/api/annotations.proto";

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/type/datetime.proto";

import "systemathics/apis/type/shared/v1/identifier.proto";

package systemathics.apis.services.tick_analytics.v1;

// Called to request TickPriipsService. 
service TickPriipsService 
{
	// Gets PRIIPs transaction cost analytics
    rpc TickPriips(TickPriipsRequest) returns (TickPriipsResponse)
	{
	     option (google.api.http) = {
			get: "/v1/tick-analytics/priips"
		 };
	}
}

// The required input to request the TickPriipsService.
message TickPriipsRequest 
{
    // [Mandatory] The instrument identifier: a ticker and exchange
	systemathics.apis.type.shared.v1.Identifier identifier = 1;

	// [Mandatory] The order date and time and timezone (or UTC offset)
	google.type.DateTime order_time = 2;

	// [Mandatory] The execution date and time (or UTC offset)
	google.type.DateTime execution_time = 3;

    // [Mandatory] The execution price
	double execution_price = 4;

	// [Mandatory] The price used to calculate the PRIIPs
	PriipsPrice field = 5;

	// [Mandatory] The latency
	google.protobuf.Duration latency = 6;

	// [Optional] Accept trading / quote conditions, by default the accept is set to null : accept all
	repeated string accept = 7;

	// [Optional] Rejected trading / quote conditions, by default the reject is set to null : do not reject
	repeated string reject = 8;

	// [Mandatory] The metrics enable or disable
	bool metrics = 9;

	// [Mandatory] Do we use the reverse iteration optimization (to find the first trade before the order).
	bool use_reverse_iteration_optimization = 10;
}

// Contains the PRIIPs data: timestamp, price, volume and ticks count.
message TickPriipsResponse
{
	// The arrival time stamp of the first trade when the market or the broker received the order
	google.protobuf.Timestamp arrival_time = 1;
	
	// The arrival price is the mid price at the exact time the trade is sent to the market (or broker)
	google.protobuf.DoubleValue arrival_price = 2;

	// The the arrival cost is the difference between the average execution price and the arrival price, expressed as a percentage
	//<br> Arrival Cost = (Execution Price - Arrival Price) / Arrival Price
	google.protobuf.DoubleValue arrival_cost = 3;
	
	// The open time : first trade time stamp just after the order time
	google.protobuf.Timestamp open_time = 4;

	// The close time : the last time stamp just after the execution time
	google.protobuf.Timestamp close_time = 5;

	// The order time : the time stamp of te client's order
	google.protobuf.Timestamp order_time = 6;

	// The execution time : the last time stamp of the oder execution
	google.protobuf.Timestamp execution_time = 7;

	// The latency : the time interval between the client's order time and the market's order received time
	google.protobuf.Duration latency = 8;
	
	// The execution price : the execution price is the price achieved for the whole trade, or the average price achieved where the trade has been broken down into multiple parts
	double execution_price = 9;

	// The total count of trades during the working period
	google.protobuf.Int64Value count = 10;

	// The open price of the working period
	google.protobuf.DoubleValue open_price = 11;

	// The highest price of the working period
	google.protobuf.DoubleValue high_price = 12;

	// The lowest price of the working period
	google.protobuf.DoubleValue low_price = 13;

	// The close price of the working period
	google.protobuf.DoubleValue close_price = 14;

	// The volume weighted average price of the working period
	google.protobuf.DoubleValue vwap = 15;

	// The total volume of the working period
	google.protobuf.Int64Value volume = 16;

	// The processing message
	string message = 17;

	// The arrival period = Order Time - Arrival Time
	google.protobuf.Duration arrival_period = 18;

	// The working period = Close Time - Arrival Time
	google.protobuf.Duration working_period = 19;

	// The closing period = Close Time - Execution Time
	google.protobuf.Duration closing_period = 20;

	// The opening period = Open Time - Order Time
	google.protobuf.Duration opening_period = 21;

	// The cross time : the time stamps of the first crossing between the prices and the execution price
	google.protobuf.Timestamp cross_time = 22;

	// The volume of trades for prices higher than the execution price during the working period
	google.protobuf.Int64Value upper_volume = 23;

	// The volume of trades for prices lower than the execution price during the working period
	google.protobuf.Int64Value lower_volume = 24;

	// The volume of trades at the execution price during the working period
	google.protobuf.Int64Value equal_volume = 25;

	// The total count of trades for prices higher than the execution price during the working period 
	google.protobuf.Int64Value upper_count = 26;

	// The total count of trades for prices lower than the execution price during the working period
	google.protobuf.Int64Value lower_count = 27;

	// The total count of trades at the execution price during the working period
	google.protobuf.Int64Value equal_count = 28;

	// The trading conditions during the working period
	repeated string conditions = 29;

	// The trading conditions for prices higher than the execution price during the working period
	repeated string upper_conditions = 30;

	// The trading conditions for prices lower than the execution price during the working period
	repeated string lower_conditions = 31;

	// The trading conditions at the execution price during the working period
	repeated string equal_conditions = 32;

	// Consumed ticks count
	int64 ticks_count = 33;
}

// The price types used to compute the Priips
enum PriipsPrice
{
	// The unspecfied field
	PRIIPS_PRICE_UNSPECIFIED = 0;
	// The last trade price
	PRIIPS_PRICE_TRADE = 1;
	// The best bid price
	PRIIPS_PRICE_BID = 2;
	// The best ask price
	PRIIPS_PRICE_ASK = 3;
}

