// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// EMA reduces the lag by applying greater weight to recent data points.
// <br>The weighting applied to the most recent price depends on the number of points in the moving average; The smaller the point count is, the more weight is applied to the most recent price.
// <br><i>N-points EMA data point</i> is computed using the previous' EMA value and the weighting multiplier as follows: $$ EMA = (Close-EMAp)*k+EMAp $$ Where:
// <br>- <i>Close</i> is the close price
// <br>- <i>EMAp</i> is the previous point' EMA value; SMA is used as the EMAp in the first calculation
// <br>- <i>N</i> is the count of points
// <br>- <i>k = 2 / N+1</i> is the Weighting Multiplier
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "systemathics/apis/type/shared/v1/constraints.proto";
import "systemathics/apis/type/shared/v1/identifier.proto";

package systemathics.apis.services.tick_analytics.v1;

// Called to request tick by tick exponential moving average data.
service TickEmaService 
{
    // Gets tick by tick exponential moving average data
    rpc TickEma(TickEmaRequest) returns (stream TickEmaResponse);
}

// The required inputs to request the TickEmaService.
message TickEmaRequest 
{
     // [Mandatory] The instrument identifier: a ticker and exchange
	systemathics.apis.type.shared.v1.Identifier identifier = 1;

	// [Optional] The time constraints used to define the look-back period.
	// If empty, then all the available data is retrieved.
	systemathics.apis.type.shared.v1.Constraints constraints = 2;
    
    // [Mandatory] The field used to calculate the ema
	EmaPrice field = 3;

    // [Mandatory] The exponential moving average window length (period : points number)
    int32 length = 4;
    
	// [Optional] The period of the ema, by default the period is set to one day
	google.protobuf.Duration period = 5;

	// [Optional] The offset time when the ema is reset, by default the offset is set to 00:00:00
	google.protobuf.Duration offset = 6;

	// [Optional] The sampling of the tick data.
	// If not set then the tick by tick data is used.
	// If set, then the sma is built using sampled data.
	google.protobuf.Duration sampling = 7;

	// [Optional] The corporate action adjustment, by default the value is set to false
	bool adjustment = 8;

	// [Optional] Accept trading / quote conditions, by default the accept is set to null : accept all
	repeated string accept = 9;

	// [Optional] Rejected trading / quote conditions, by default the reject is set to null : do not reject
	repeated string reject = 10;
}

// Contains the exponential moving average data: timestamp and value.
message TickEmaResponse
{
	// The time stamp the exponential moving average
	google.protobuf.Timestamp time_stamp = 1;
	
	// The data used to calculate the average
	double value = 2;

	// The exponential moving average value
	google.protobuf.DoubleValue average = 3;
}

// The price types used to compute the avarage
enum EmaPrice
{
	// The unspecfied field
	EMA_PRICE_UNSPECIFIED = 0;
	// The last trade price
	EMA_PRICE_TRADE = 1;
	// The best bid price
	EMA_PRICE_BID = 2;
	// The best ask price
	EMA_PRICE_ASK = 3;
}
