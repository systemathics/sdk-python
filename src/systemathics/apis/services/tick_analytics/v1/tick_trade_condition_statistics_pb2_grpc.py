# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from systemathics.apis.services.tick_analytics.v1 import tick_trade_condition_statistics_pb2 as systemathics_dot_apis_dot_services_dot_tick__analytics_dot_v1_dot_tick__trade__condition__statistics__pb2


class TickTradeConditionStatisticsServiceStub(object):
    """Called to request tick by tick trade condition statistics.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TickTradeConditionStatistics = channel.unary_stream(
                '/systemathics.apis.services.tick_analytics.v1.TickTradeConditionStatisticsService/TickTradeConditionStatistics',
                request_serializer=systemathics_dot_apis_dot_services_dot_tick__analytics_dot_v1_dot_tick__trade__condition__statistics__pb2.TickTradeConditionStatisticsRequest.SerializeToString,
                response_deserializer=systemathics_dot_apis_dot_services_dot_tick__analytics_dot_v1_dot_tick__trade__condition__statistics__pb2.TickTradeConditionStatisticsResponse.FromString,
                )


class TickTradeConditionStatisticsServiceServicer(object):
    """Called to request tick by tick trade condition statistics.
    """

    def TickTradeConditionStatistics(self, request, context):
        """Gets tick by tick trade condition statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TickTradeConditionStatisticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TickTradeConditionStatistics': grpc.unary_stream_rpc_method_handler(
                    servicer.TickTradeConditionStatistics,
                    request_deserializer=systemathics_dot_apis_dot_services_dot_tick__analytics_dot_v1_dot_tick__trade__condition__statistics__pb2.TickTradeConditionStatisticsRequest.FromString,
                    response_serializer=systemathics_dot_apis_dot_services_dot_tick__analytics_dot_v1_dot_tick__trade__condition__statistics__pb2.TickTradeConditionStatisticsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'systemathics.apis.services.tick_analytics.v1.TickTradeConditionStatisticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TickTradeConditionStatisticsService(object):
    """Called to request tick by tick trade condition statistics.
    """

    @staticmethod
    def TickTradeConditionStatistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/systemathics.apis.services.tick_analytics.v1.TickTradeConditionStatisticsService/TickTradeConditionStatistics',
            systemathics_dot_apis_dot_services_dot_tick__analytics_dot_v1_dot_tick__trade__condition__statistics__pb2.TickTradeConditionStatisticsRequest.SerializeToString,
            systemathics_dot_apis_dot_services_dot_tick__analytics_dot_v1_dot_tick__trade__condition__statistics__pb2.TickTradeConditionStatisticsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
