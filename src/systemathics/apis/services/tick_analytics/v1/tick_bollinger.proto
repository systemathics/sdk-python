// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Bollinger bands were created by John Bollinger, they are envelopes and plotted around the moving average. 
// <br> The width of the bands is based on the standard deviaton of the closing prices from a moving average as follows:
// <br><i>- Middle band = n-period moving average</i>
// <br><i>- Upper band = Middle band + (k * n-period standard deviation)</i>
// <br><i>- Lower band = Middle band - (k * n-period standard deviation)</i>
// <br><i> Where n is the number of periods and k is factor to apply to the standard deviation value, k=2 as default value.</i>
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "systemathics/apis/type/shared/v1/constraints.proto";
import "systemathics/apis/type/shared/v1/identifier.proto";
import "google/protobuf/wrappers.proto";

package systemathics.apis.services.tick_analytics.v1;

// Called to request tick by tick Bollinger bands data. 
service TickBollingerService 
{
	// Gets tick by tick Bollinger bands data
    rpc TickBollinger(TickBollingerRequest) returns (stream TickBollingerResponse);
}

// The required inputs to request the TickBollingerService.
message TickBollingerRequest 
{
    // [Mandatory] The instrument identifier: a ticker and exchange
    systemathics.apis.type.shared.v1.Identifier identifier = 1;
    
    // [Optional] The time constraints used to define the look-back period.
	// If empty, then all the available data is retrieved.
    systemathics.apis.type.shared.v1.Constraints constraints = 2;
	
	// [Mandatory] The field used to build the Bollinger bands
    BollingerPrice field = 3;
	
	// [Mandatory] The simple moving average window length (period: data points number)
	int32 length = 4;

	// [Mandatory] The standard deviation window length
	double deviation = 5; 

    // [Optional] The period of the Bollinger bands, by default the period is set to one day
    google.protobuf.Duration period = 6;

    // [Optional] The offset time when the Bollinger bands is reset, by default the offset is set to 00:00:00
    google.protobuf.Duration offset = 7;

	// [Optional] The sampling of the tick data.
	// If not set then the tick by tick data is used.
	// If set, then the sma is built using sampled data.
    google.protobuf.Duration sampling = 8;

    // [Optional] The corporate action adjustment, by default the value is set to false
    bool adjustment = 9;

    // [Optional] Accept trading / quote conditions, by default the accept is set to null : accept all
    repeated string accept = 10;

    // [Optional] Rejected trading / quote conditions, by default the reject is set to null : do not reject
    repeated string reject = 11;
}

// Contains the tick Bollinger bands data: date, lower, middle and upper.
message TickBollingerResponse
{
	// The time stamp of the bollinger bands
	google.protobuf.Timestamp time_stamp = 1;
	
	// The data used to calculate the Bollinger bands of the day
	double value = 2;

	// Bollinger lower band value of the day
	// <br><i>Lower band = Middle band - (k * n-period standard deviation)</i>
	google.protobuf.DoubleValue lower = 3;

	// Bollinger upper band value of the day
	// <br><i>Upper band = Middle band + (k * n-period standard deviation)</i>
	google.protobuf.DoubleValue upper = 4;

	// Bollinger middle band value of the day
	// <br><i>Middle band = n-period moving average</i>
	google.protobuf.DoubleValue middle = 5;
}

// The price types used to compute the bollinger bands
enum BollingerPrice
{
	// The unspecfied field
	BOLLINGER_PRICE_UNSPECIFIED = 0;
	// The last trade price
	BOLLINGER_PRICE_TRADE = 1;
	// The best bid price
	BOLLINGER_PRICE_BID = 2;
	// The best ask price
	BOLLINGER_PRICE_ASK = 3;
}
