// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Tick bars are widely used to illustrate price movements for an instrument over a look back period. 
// Commonly used in financial analysis and trading strategies as a technical indicator.
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "systemathics/apis/type/shared/v1/constraints.proto";
import "systemathics/apis/type/shared/v1/identifier.proto";

package systemathics.apis.services.tick_analytics.v1;

// Called to request tick by tick bars data.
service TickBarsService 
{
    // Gets tick by tick bars data
    rpc TickBars(TickBarsRequest) returns (stream TickBarsResponse);
}

// The required inputs to request the TickBarService.
message TickBarsRequest 
{
    // [Mandatory] The instrument identifier: a ticker and exchange
	systemathics.apis.type.shared.v1.Identifier identifier = 1;

	// [Optional] The time constraints used to define the look-back period.
	// If empty, then all the available data is retrieved.
	systemathics.apis.type.shared.v1.Constraints constraints = 2;
    
    // [Optional] The price used to calculate the bar
	BarPrice field = 3;

    // [Mandatory] The duration of the bar
	google.protobuf.Duration sampling = 4;
    
	// [Optional] The period of the bars, by default the period is set to one day
	google.protobuf.Duration period = 5;

	// [Optional] The offset time when the bars is reset, by default the offset is set to 00:00:00
	google.protobuf.Duration offset = 6;

	// [Optional] The corporate action adjustment, by default the value is set to false
	bool adjustment = 7;

	// [Optional] Accept trading / quote conditions, by default the accept is set to null : accept all
	repeated string accept = 8;

	// [Optional] Rejected trading / quote conditions, by default the reject is set to null : do not reject
	repeated string reject = 9;
}

// Contains the tick bar's data: time, open, high, low, close, volume, count and vwap.
message TickBarsResponse
{
	// The time stamp
	google.protobuf.Timestamp time_stamp = 1;
	
	// Open price of the current bar
	double open = 2;
	
	// Highest price of the current bar
	double high = 3;
	
	// Lowest price of the current bar
	double low = 4;
	
	// Close price of the current bar
	double close = 5;
	
	// Total traded volume of the current bar
	int64 volume = 6;

	// Tick count of the current bar
	int32 count = 7;

	// Volume weighted average price of the current bar
	double vwap = 8;
}

// The price types used to compute the bars
enum BarPrice
{
	// The unspecfied field
	BAR_PRICE_UNSPECIFIED = 0;
	// The last trade price
	BAR_PRICE_TRADE = 1;
	// The best bid price
	BAR_PRICE_BID = 2;
	// The best ask price
	BAR_PRICE_ASK = 3;
}

