// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Moving averages smooth the price movements by filtering out the "noise" caused by short-term price fluctuations. 
// <br>They also form the building blocks for a wide range of technical indicators. Computing moving averages over a defined number of time periods is useful to:
// <br>- identify the trend direction
// <br>- determine support and resistance levels
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";

import "systemathics/apis/type/shared/v1/constraints.proto";
import "systemathics/apis/type/shared/v1/identifier.proto";

package systemathics.apis.services.tick_analytics.v1;

// Called to request tick by tick cumulative moving average data.
service TickCmaService 
{
	// Gets tick by tick cumulative moving average data
    rpc TickCma(TickCmaRequest) returns (stream TickCmaResponse);
}

// The required inputs to request the TickCmaService.
message TickCmaRequest 
{
    // [Mandatory] The instrument identifier: a ticker and exchange
	systemathics.apis.type.shared.v1.Identifier identifier = 1;

	// [Optional] The time constraints used to define the look-back period
	// If empty, then all the available data is used
	systemathics.apis.type.shared.v1.Constraints constraints = 2;
    
    // [Mandatory] The field used to calculate the cma
	CmaPrice field = 3;
    
	// [Optional] The period of the vwap, by default the period is set to one day
	google.protobuf.Duration period = 4;

	// [Optional] The offset time when the vwap is reset, by default the offset is set to 00:00:00
	google.protobuf.Duration offset = 5;

	// [Optional] The sampling of the tick data
	// If not set then the tick by tick data is used
	// If set, then the cma is built using sampled data
	google.protobuf.Duration sampling = 6;

	// [Optional] The corporate action adjustment, by default the value is set to false
	bool adjustment = 7;

	// [Optional] Accept trading / quote conditions, by default the accept is set to null : accept all
	repeated string accept = 8;

	// [Optional] Rejected trading / quote conditions, by default the reject is set to null : do not reject
	repeated string reject = 9;
}

// Contains the cumulative moving average data: timestamp and value.
message TickCmaResponse
{
	// The time stamp of the cumulative moving average
	google.protobuf.Timestamp time_stamp = 1;
	
	// The data used to calculate the average
	double value = 2;

	// The cumulative moving average value for all the data points
	google.protobuf.DoubleValue average = 3;
}

// The price types used to compute the avarage
enum CmaPrice
{
	// The unspecfied field
	CMA_PRICE_UNSPECIFIED = 0;
	// The last trade price
	CMA_PRICE_TRADE = 1;
	// The best bid price
	CMA_PRICE_BID = 2;
	// The best ask price
	CMA_PRICE_ASK = 3;
}
