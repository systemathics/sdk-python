// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Tick count can be used as an indicator to illustrate market activity by computing the technical transactions/transmissions count on a tick by tick basis.
// <br>It represents a valuable technical indicator to monitor tick by tick data reception. Building a history of tick count can be useful to:
// <br>- guarantee tick by tick data good reception and completion
// <br>- compare trading periods and highlight high-level of activity periods
// <br>- combined with other indicators, it helps to optimal future rolling, etc.
// <br>Correlated with of other indicators such as traded volume and count of trades, over the same look back period, it repserents a good measurement of the market quality.
syntax = "proto3";

import "google/protobuf/wrappers.proto";
import "google/type/date.proto";
import "systemathics/apis/type/shared/v1/identifier.proto";
import "systemathics/apis/type/shared/v1/level.proto";

package systemathics.apis.services.topology.v1;

// Called to request topology over a look back-period with a given time granularity.
service TopologiesService
{
  // Gets topology per a given time granularity
  rpc Topologies(TopologiesRequest) returns (TopologiesResponse);
}

// Contains the topology granularity
enum TopologyGranularity
{
	// Unspecified granularity.
    TOPOLOGY_GRANULARITY_UNSPECIFIED = 0;
    // Daily granularity.
    TOPOLOGY_GRANULARITY_DAILY = 1;
    // Weekly granularity.
    TOPOLOGY_GRANULARITY_WEEKLY = 2;
    // Monthly granularity.
    TOPOLOGY_GRANULARITY_MONTHLY = 3;
    // Quaterly granularity.
    TOPOLOGY_GRANULARITY_QUATERLY = 4;
    // Yearly granularity.
    TOPOLOGY_GRANULARITY_YEARLY = 5;
}

// The required input to request the TopologiesService.
message TopologiesRequest
{
    // [Mandatory] The instrument identifier: a ticker and exchange
    systemathics.apis.type.shared.v1.Identifier identifier = 1;
    // [Mandatory] Level representing either Trades only(Level 1) or Trades + Book (Level 1 and Level 2)
    systemathics.apis.type.shared.v1.Level level = 2;
    // [Mandatory] Granularity of the request (daily, weekly, ...)
    TopologyGranularity granularity = 3;
    // [To do] Start at 0 when using pagination or null
    google.protobuf.Int32Value start = 4; 
    // [To do] Define your count of element received when using pagination or null 
    google.protobuf.Int32Value count = 5;
}

// Contains the number of ticks between 2 dates
message TopologyEntry
{
    // Begin date (included)
    google.type.Date begin = 1;
    // End date (included)
    google.type.Date end = 2;
    // Tick count
    uint64 ticks_count = 3;
}

// Represents a topology response.
message TopologiesResponse
{
    // The toplogoly data: an array of TopologyEntry objects
	repeated TopologyEntry entries = 1;
    // If using paginated version will return true until everything is returned, it's false otherwise
    bool has_more = 2;
}
