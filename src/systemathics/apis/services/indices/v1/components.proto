// Copyright (c) 2021 Systemathics
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Up-to-date index components weights
syntax = "proto3";


import "google/type/date.proto";

import "systemathics/apis/type/shared/v1/identifier.proto";
import "systemathics/apis/type/shared/v1/constraints.proto";

package systemathics.apis.services.indices.v1;

// Called to request index weights data.
service ComponentsService
{
  // Gets index components data
  rpc Components(ComponentsRequest) returns (ComponentsResponse);
}

// The required input to request the ComponentsService
message ComponentsRequest
{
	// [Mandatory] The index name
	string identifier = 1;
}

// Represents a components response.
message ComponentsResponse
{
	// The index components: an array of component objects
	repeated Component components = 1;
}

// Contains the weight data for one component: identifier and weight value.
message Component 
{	
	// The instrument identifier: a ticker and exchange 
	systemathics.apis.type.shared.v1.Identifier identifier = 1;

	// The weight value
	double weight = 2;
}

 
